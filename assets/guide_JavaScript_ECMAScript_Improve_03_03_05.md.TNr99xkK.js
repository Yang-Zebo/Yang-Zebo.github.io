import{_ as s,c as i,o as e,a2 as a}from"./chunks/framework.BLHWSx9w.js";const g=JSON.parse('{"title":"Reflect","description":"","frontmatter":{},"headers":[],"relativePath":"guide/JavaScript/ECMAScript/Improve/03/03_05.md","filePath":"guide/JavaScript/ECMAScript/Improve/03/03_05.md","lastUpdated":1696650549000}'),l={name:"guide/JavaScript/ECMAScript/Improve/03/03_05.md"},n=a(`<h1 id="reflect" tabindex="-1">Reflect <a class="header-anchor" href="#reflect" aria-label="Permalink to &quot;Reflect&quot;">​</a></h1><h2 id="_1-reflect-概述" tabindex="-1">1. Reflect 概述 <a class="header-anchor" href="#_1-reflect-概述" aria-label="Permalink to &quot;1. Reflect 概述&quot;">​</a></h2><ol><li><code>Reflect</code> 是一个内置的对象，是 <code>ES6</code> 为了操作对象而提供的新 <code>API</code>。</li><li><code>Reflect</code>对象目的一是为了将<code>Object</code>对象的一些明显属于语言内部的方法放到<code>Reflect</code>对象上。二是为了修改某些<code>Object</code>方法的返回结果，让其变得更合理。</li><li><code>Reflect</code>对象一共有 <code>13</code> 个静态方法，大部分与<code>Object</code>对象的同名方法的作用都是相同的，而且它与<code>Proxy</code>对象的方法是一一对应的。返回值类型也是一致的。</li><li><code>Reflect</code>不是一个函数对象，因此它是不可构造的，所以不能通过<code>new</code>运算符对其进行调用，或者将<code>Reflect</code>对象作为一个函数来调用。</li><li>现阶段，某些方法同时在<code>Object</code>和<code>Reflect</code>对象上部署，未来的新方法将只部署在<code>Reflect</code>对象上。</li></ol><h2 id="_2-reflect-静态方法" tabindex="-1">2. Reflect 静态方法 <a class="header-anchor" href="#_2-reflect-静态方法" aria-label="Permalink to &quot;2. Reflect 静态方法&quot;">​</a></h2><h3 id="reflect-apply" tabindex="-1">Reflect.apply <a class="header-anchor" href="#reflect-apply" aria-label="Permalink to &quot;Reflect.apply&quot;">​</a></h3><ol><li><code>Reflect.apply(target, thisArgument, argumentsList)</code>，通过指定的参数列表发起对目标 <code>target</code> 函数的调用。</li><li>参数</li></ol><ul><li><code>target</code> 目标函数。</li><li><code>thisArgumenttarget</code> 函数调用时绑定的 <code>this</code> 对象。</li><li><code>argumentsList</code>，<code>target</code> 函数调用时传入的实参列表，该参数应该是一个类数组的对象。</li></ul><ol start="3"><li>返回值是调用完带着指定参数和<code>this</code>指向的函数后返回的结果。</li><li>该方法与<code>Function.prototype.apply()</code>方法类似，调用一个方法并且显式地指定<code>this</code>指向和参数列表，参数列表可以是数组，或类似数组的对象。</li><li>如果 <code>target</code> 对象不可调用，抛出 <code>TypeError</code>。</li></ol><h3 id="reflect-construct" tabindex="-1">Reflect.construct <a class="header-anchor" href="#reflect-construct" aria-label="Permalink to &quot;Reflect.construct&quot;">​</a></h3><ol><li><code>Reflect.construct(target, argumentsList[, newTarget])</code>，用构造函数创建一个实例对象。</li><li>参数</li></ol><ul><li><code>target</code> 被运行的目标构造函数。</li><li><code>argumentsList</code> 类数组，目标构造函数调用时的参数。</li><li><code>newTarget</code>（可选）， 作为新创建对象的原型对象的<code>constructor</code>属性，默认指向的时构造函数<code>target</code>本身。</li></ul><ol start="3"><li>方法的行为有点像<code>new</code> 构造函数 ，相当于执行<code>new target(...argumentsList)</code>。</li><li>返回值是以<code>target</code>（如果<code>newTarget</code>存在，则为<code>newTarget</code>）函数为构造函数，<code>argumentList</code>为其初始化参数的对象实例。</li><li>如果 <code>target</code> 或者 <code>newTarget</code> 不是构造函数，抛出<code>TypeError</code>,异常。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">construct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Person, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;yzb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], Student) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Student {name: &#39;yzb&#39;}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 相当于</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;yzb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 但是如果不使用 new 操作符调用构造函数，构造函数内部的 new.target 值会指向 undefined。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// new.target 伪属性允许您检测是否使用 new 运算符调用了函数或 构造函数。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在使用 new 运算符调用的构造函数和函数中，new.target返回对构造函数或函数的引用。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在正常的函数调用中，new.target 是 undefined.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="reflect-defineproperty" tabindex="-1">Reflect.defineProperty <a class="header-anchor" href="#reflect-defineproperty" aria-label="Permalink to &quot;Reflect.defineProperty&quot;">​</a></h3><ol><li><code>Reflect.defineProperty(target, propertyKey, attributes)</code>，对对象的属性进行自定义设置。</li><li>参数</li></ol><ul><li><code>target</code> 目标对象。</li><li><code>propertyKey</code> 要定义或修改的属性的名称。</li><li><code>attributes</code> 要定义或修改的属性的描述，是一个对象。</li></ul><ol start="3"><li>方法行为与<code> Object.defineProperty()</code>类似，不同是<code>Object.defineProperty</code>返回值是一个对象。</li><li>如果属性没有被成功定义，抛出一个<code>TypeError</code>。</li><li><code>Reflect.defineProperty</code>方法只返回一个<code>Boolean</code>，来说明该属性是否被成功定义。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="reflect-deleteproperty" tabindex="-1">Reflect.deleteProperty <a class="header-anchor" href="#reflect-deleteproperty" aria-label="Permalink to &quot;Reflect.deleteProperty&quot;">​</a></h3><ol><li><code>Reflect.deleteProperty(target, propertyKey)</code>，用于删除属性。</li><li>参数</li></ol><ul><li><code>target</code> 删除属性的目标对象。</li><li><code>propertyKey</code> 需要删除的属性的名称。</li></ul><ol start="3"><li>相当于执行 <code>delete target[name]</code>。</li><li>它是一个函数，返回值是<code>Boolean</code>值表明该属性是否被成功删除。</li><li>如果<code>target</code>不是 <code>Object</code>，抛出一个 <code>TypeError</code>。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// arr [1, 2, 3, , 5]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果属性不存在，返回 true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果属性不可配置，返回 false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">freeze</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ foo: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="reflect-get" tabindex="-1">Reflect.get <a class="header-anchor" href="#reflect-get" aria-label="Permalink to &quot;Reflect.get&quot;">​</a></h3><ol><li><code>Reflect.get(target, propertyKey[, receiver])</code>，获取对象身上某个属性的值。</li><li>参数</li></ol><ul><li><code>target</code> 需要取值的目标对象。</li><li><code>propertyKey</code> 需要获取的值的属性名。</li><li><code>receiver</code>，如果<code>target</code>对象中指定了<code>getter</code>，<code>receiver</code>则为<code>getter</code>调用时的<code>this</code>值。</li></ul><ol start="3"><li>类似于 <code>target[name]</code>，但它是通过一个函数执行来操作的。</li><li>返回值就是对象中属性的值。</li><li>如果目标值类型不是 <code>Object</code>，则抛出一个 <code>TypeError</code>。</li></ol><h3 id="reflect-getownpropertydescriptor" tabindex="-1">Reflect.getOwnPropertyDescriptor <a class="header-anchor" href="#reflect-getownpropertydescriptor" aria-label="Permalink to &quot;Reflect.getOwnPropertyDescriptor&quot;">​</a></h3><ol><li><code>Reflect.getOwnPropertyDescriptor(target, propertyKey)</code>，方法返回对象中属性的描述对象。</li><li>参数</li></ol><ul><li><code>target</code> 需要寻找属性的目标对象。</li><li><code>propertyKey</code> 获取自己的属性描述符的属性的名称。</li></ul><ol start="3"><li>行为类似于<code> Object.getOwnPropertyDescriptor()</code>。</li><li>返回值是如果对象中存在该属性，则返回对应的属性描述符，否则返回 <code>undefined</code>。</li><li>如果目标值类型不是 <code>Object</code>，则抛出一个 <code>TypeError</code>。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOwnPropertyDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {value: &#39;hello&#39;, writable: true, enumerable: true, configurable: true}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOwnPropertyDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="reflect-getprototypeof" tabindex="-1">Reflect.getPrototypeOf <a class="header-anchor" href="#reflect-getprototypeof" aria-label="Permalink to &quot;Reflect.getPrototypeOf&quot;">​</a></h3><ol><li><code>Reflect.getPrototypeOf(target)</code>，返回目标对象的原型对象。</li><li>参数</li></ol><ul><li><code>target</code> 获取原型的目标对象。</li></ul><ol start="3"><li>方法类似于<code>Object.getPrototypeOf()</code>，都是返回指定对象的原型对象。</li><li>返回值是回指定对象的原型，如果目标对象没有继承的属性，则返回 <code>null</code>。</li><li>如果目标值类型不是 <code>Object</code>，则抛出一个 <code>TypeError</code>。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Object.prototype</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="reflect-has" tabindex="-1">Reflect.has <a class="header-anchor" href="#reflect-has" aria-label="Permalink to &quot;Reflect.has&quot;">​</a></h3><ol><li><code>Reflect.has(target, propertyKey)</code>，判断一个对象是否存在某个属性。</li><li>参数</li></ol><ul><li><code>target</code>，目标对象</li><li><code>propertyKey</code> 属性名</li></ul><ol start="3"><li>和 <code>in</code> 运算符，的功能完全相同。</li><li>返回一个<code>Boolean</code>值标识对象是否纯在某个属性。</li><li>如果目标对象并非<code>Object</code>类型，抛出<code>TypeError</code>。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果该属性存在于原型链中，返回 true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;toString&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="reflect-ownkeys" tabindex="-1">Reflect.ownKeys <a class="header-anchor" href="#reflect-ownkeys" aria-label="Permalink to &quot;Reflect.ownKeys&quot;">​</a></h3><ol><li><code>Reflect.ownKeys(target)</code>，类似于<code>Object.key()</code>。</li><li>参数</li></ol><ul><li><code>target</code>获取自身属性键的目标对象。</li></ul><ol start="3"><li>返回值是一个包含自身所有属性（不包括继承）的数组。</li><li>此方法不会受到<code>enumerable</code>（是否可枚举）影响，即使属性不可以被枚举，此方法也能查找到。</li><li>如果目标不是 <code>Object</code>，抛出一个 <code>TypeError</code>。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ownKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ z: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ &#39;z&#39;, &#39;y&#39;, &#39;x&#39; ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ownKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;length&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sym </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Symbol.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;comet&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [sym]: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ownKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [Symbol(comet), &#39;str&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="reflect-isextensible" tabindex="-1">Reflect.isExtensible <a class="header-anchor" href="#reflect-isextensible" aria-label="Permalink to &quot;Reflect.isExtensible&quot;">​</a></h3><ol><li><code>Reflect.isExtensible(target)</code>， 判断一个对象是否可扩展（即是否能够添加新的属性），</li><li>参数</li></ol><ul><li><code>target</code> 目标对象</li></ul><ol start="3"><li>类似于<code>Object.isExtensible()</code>。</li><li>返回值是一个<code>Boolen</code>值。</li><li>如果目标不是 <code>Object</code>，抛出一个 <code>TypeError</code>。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> empty </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isExtensible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(empty) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventExtensions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(empty)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isExtensible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(empty) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="reflect-preventextensions" tabindex="-1">Reflect.preventExtensions <a class="header-anchor" href="#reflect-preventextensions" aria-label="Permalink to &quot;Reflect.preventExtensions&quot;">​</a></h3><ol><li><code>Reflect.preventExtensions(target)</code>，方法阻止新属性添加到对象。</li><li>参数</li></ol><ul><li><code>target</code> 阻止扩展的目标对象。</li></ul><ol start="3"><li>如果 <code>target</code> 不是 <code>Object</code>，则抛出一个 <code>TypeError</code> 错误。</li><li>该方法与 <code>Object.preventExtensions()</code>相似。</li><li>如果目标不是 <code>Object</code>，抛出一个 <code>TypeError</code>。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> empty </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isExtensible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(empty) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//rue</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventExtensions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(empty)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isExtensible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(empty) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="reflect-set" tabindex="-1">Reflect.set <a class="header-anchor" href="#reflect-set" aria-label="Permalink to &quot;Reflect.set&quot;">​</a></h3><ol><li><code>Reflect.set(target, propertyKey, value[, receiver])</code>，在一个对象上设置一个属性。</li><li>参数</li></ol><ul><li><code>target</code> 设置属性的目标对象。</li><li><code>propertyKey</code> 设置的属性的名称。</li><li><code>value</code> 设置的值。</li><li><code>receiver</code> 如果遇到 <code>setter</code>，<code>receiver</code> 则为 <code>setter</code> 调用时的 <code>this</code> 值。</li></ul><ol start="3"><li>返回值是一个 <code>Boolean</code> 值表明是否成功设置属性。</li><li>如果目标不是 <code>Object</code>，则抛出一个 <code>TypeError</code>。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prop&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.prop </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;value&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Array</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;duck&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;duck&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;duck&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;goose&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;goose&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;duck&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="reflect-setprototypeof" tabindex="-1">Reflect.setPrototypeOf <a class="header-anchor" href="#reflect-setprototypeof" aria-label="Permalink to &quot;Reflect.setPrototypeOf&quot;">​</a></h3><ol><li><code>Reflect.setPrototypeOf(target, prototype)</code>，设置对象原型的函数。</li><li>参数</li></ol><ul><li><code>target</code> 设置原型的目标对象。</li><li><code>prototype</code> 对象的新原型（一个对象或<code> null</code>）。</li></ul><ol start="3"><li>返回一个 <code>Boolean</code>， 如果更新成功，则返回<code>true</code>。</li><li>如果 <code>target</code> 不是 <code>Object</code> ，或 <code>prototype</code> 既不是对象也不是 <code>null</code>，抛出一个 <code>TypeError</code> 异常。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,67),t=[n];function p(h,r,k,d,c,o){return e(),i("div",null,t)}const y=s(l,[["render",p]]);export{g as __pageData,y as default};
