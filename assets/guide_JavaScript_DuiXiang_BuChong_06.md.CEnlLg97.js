import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.DMnPLqTg.js";const y=JSON.parse('{"title":"Proxy","description":"","frontmatter":{},"headers":[],"relativePath":"guide/JavaScript/DuiXiang/BuChong/06.md","filePath":"guide/JavaScript/DuiXiang/BuChong/06.md","lastUpdated":1721114433000}'),e={name:"guide/JavaScript/DuiXiang/BuChong/06.md"},l=n(`<h1 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h1><h2 id="_1-proxy-概述" tabindex="-1">1. Proxy 概述 <a class="header-anchor" href="#_1-proxy-概述" aria-label="Permalink to &quot;1. Proxy 概述&quot;">​</a></h2><ol><li><code>Proxy</code> 原意是代理，在这里表示由它来<code>代理</code>某些操作，用于修改某些操作的默认行为。</li></ol><ul><li>可以理解成，在目标对象之前架设一层拦截，外界对该对象的访问，都必须先通过这层拦截，它提供了一种机制，可以对外界的访问进行过滤和改写。如属性查找、赋值、枚举、函数调用等。</li><li><code>Proxy</code> 实际上重载了点运算符<code>.</code>，即用自己的定义覆盖了语言的原始定义。<code>ES6</code> 原生提供 <code>Proxy</code> 构造函数，用来生成 <code>Proxy</code> 实例。</li></ul><ol start="2"><li><code>Proxy</code> 对象的所有用法都是这种形式，<code>new Proxy()</code>表示生成一个<code>Proxy</code>实例。</li></ol><ul><li><code>target</code> 表示所要拦截的目标对象。</li><li><code>handler</code> 也是一个对象，以函数作为属性的对象。各属性中的函数分别定义了在执行各种操作时代理对象的行为。</li><li><code>handler</code> 对象里的属性与 <code>Reflect</code> 的静态方法使用方式高度一致，并且返回值的类型也一样，所以当我们使用<code>Proxy</code>是不知道返回值设置什么就可以直接使用相同的<code>Reflect</code>方法的返回值来当作<code>Proxy</code>属性的返回值。</li><li>例子，重定义了属性的读取 <code>get</code> 和设置 <code>set</code> 行为，当对 <code>obj</code> 进行设置与读取操作讲触发：</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, handler)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // handler 属性与 Reflect 静态方法用法一致，返回值类型一致</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">propKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`getting \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">propKey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}!\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, propKey, receiver)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">propKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`setting \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">propKey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}!\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, propKey, value, receiver)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  setting count!</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.count</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  getting count!</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  setting count!</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ol start="3"><li>目标对象改变 <code>proxy</code> 实例对象也会改变，反之亦然。但是<code>proxy</code>代理可能会有拦截器，而直接通过改变目标对象来改变<code>proxy</code>实例对象可以绕过拦截器发生作用。</li></ol><h2 id="_2-proxy-实例的方法" tabindex="-1">2. Proxy 实例的方法 <a class="header-anchor" href="#_2-proxy-实例的方法" aria-label="Permalink to &quot;2. Proxy 实例的方法&quot;">​</a></h2><h3 id="get" tabindex="-1">get <a class="header-anchor" href="#get" aria-label="Permalink to &quot;get&quot;">​</a></h3><ol><li><code>get(target, propKey, receiver)</code>， 方法用于拦截对象的读取属性操作。</li><li>参数</li></ol><ul><li><code>target</code> 目标对象</li><li><code>propKey</code> 属性名</li><li><code>receiver</code> 可选参数，非必填。可以是<code>proxy</code>实例本身，或者继承<code>Proxy</code>的对象</li></ul><ol start="3"><li>返回值可以是任何值。</li><li>该方法会拦截目标对象的以下操作</li></ol><ul><li>访问属性：<code>proxy[foo]</code> 和 <code>proxy.bar</code></li><li>访问原型链上的属性：<code>Object.create(proxy)[foo]</code></li><li><code>Reflect.get()</code>操作</li></ul><ol start="6"><li>如果要访问的目标属性是不可写以及不可配置的，则返回的值必须与该目标属性的值相同否则会报错。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">propKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, propKey)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="set" tabindex="-1">set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set&quot;">​</a></h3><ol><li><code>set(arget, property, value, receiver)</code>，方法用来拦截某个属性的赋值操作。</li><li>参数</li></ol><ul><li><code>target</code> 目标对象</li><li><code>propKey</code> 属性名</li><li><code>value</code> 新属性值</li><li><code>receiver</code> 可选参数，非必填。可以是<code>proxy</code>实例本身，或者继承<code>Proxy</code>的对象。</li></ul><ol start="3"><li><code>set()</code> 方法应当返回一个布尔值，返回 <code>true</code> 代表属性设置成功。在严格模式下，如果 <code>set()</code> 方法返回 <code>false</code>，那么会抛出一个 <code>TypeError</code> 异常。</li><li>该方法会拦截目标对象的以下操作</li></ol><ul><li>指定属性值：<code>proxy[foo] = bar</code> 和 <code>proxy.foo = bar</code></li><li>指定继承者的属性值：<code>Object.create(proxy)[foo] = bar</code></li><li><code>Reflect.set()</code>操作</li></ul><ol start="5"><li>若目标属性是一个不可写及不可配置的数据属性，则不能改变它的值。如果目标属性没有配置存储方法，<code>set()</code> 属性的是 <code>undefined</code>，则不能设置它的值。在严格模式下，如果 <code>set()</code> 方法返回 <code>false</code>，那么也会抛出一个 <code>TypeError</code> 异常。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">propKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">propVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, propKey, propVal)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person, handle)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="apply" tabindex="-1">apply <a class="header-anchor" href="#apply" aria-label="Permalink to &quot;apply&quot;">​</a></h3><ol><li><code>apply(target, thisArg, argumentsList)</code>，方法拦截函数的直接调用。</li><li>参数</li></ol><ul><li><code>target</code> 目标对象（函数）</li><li><code>thisArg</code> 被调用时的上下文对象(<code>this</code>指向)</li><li><code>argumentsList</code> 被调用时的参数组成的数组</li></ul><ol start="3"><li><code>apply</code> 方法可以返回任何值</li><li>该方法会拦截目标对象的以下操作</li></ol><ul><li><code>proxy(...args)</code></li><li><code>Function.prototype.apply()</code> 和 <code>Function.prototype.call()</code></li><li><code>Reflect.apply()</code></li></ul><ol start="5"><li><code>target</code> 必须是可被调用的，它必须是一个函数，否则会报错。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">thisArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argumentsList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test, handler)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在代理的函数执行就会调用我们写入的函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1,2,3]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="has" tabindex="-1">has <a class="header-anchor" href="#has" aria-label="Permalink to &quot;has&quot;">​</a></h3><ol><li><code>has(target, propKey)</code>，方法是针对 <code>in</code> 操作符的代理方法。</li><li>参数</li></ol><ul><li><code>target</code> 目标对象</li><li><code>propKey</code> 属性名</li></ul><ol start="3"><li>方法返回一个 <code>boolean</code> 属性的值。</li><li>方法可以拦截下面这些操作</li></ol><ul><li><code>Reflect.has()</code></li><li>属性查询：<code>foo in proxy</code></li><li>继承属性查询：<code>foo in Object.create(proxy)</code></li><li><code>with</code> 检查: <code>with(proxy) { (foo) }</code></li></ul><ol start="5"><li>如果目标对象为不可扩展对象，则该对象的属性不能够被代理隐藏，会报错。如果目标对象的某一属性本身不可被配置，则该属性不能够被代理隐藏，会报错。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventExtensions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeError is thrown</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="deleteproperty" tabindex="-1">deleteProperty <a class="header-anchor" href="#deleteproperty" aria-label="Permalink to &quot;deleteProperty&quot;">​</a></h3><ol><li><code>deleteProperty(target, propKey)</code>，方法用于拦截<code>Proxy</code>对象属性的 <code>delete</code> 操作。</li><li>参数</li></ol><ul><li><code>target</code> 目标对象</li><li><code>propKey</code> 要删除的属性名</li></ul><ol start="4"><li><code>deleteProperty</code> 必须返回一个 <code>Boolean</code> 类型的值，表示了该属性是否被成功删除。</li><li>该方法会拦截以下操作</li></ol><ul><li>删除属性：<code>delete proxy[foo]</code> 和 <code>delete proxy.foo</code></li><li><code>Reflect.deleteProperty()</code>操作</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    deleteProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">propKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Reflect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, propKey)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.a </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="ownkeys" tabindex="-1">ownKeys <a class="header-anchor" href="#ownkeys" aria-label="Permalink to &quot;ownKeys&quot;">​</a></h3><ol><li><code>ownKeys(target)</code>，方法用于对象的属性的遍历操作。 <code>Reflect.ownKeys(proxy)</code>，<code>Object.getOwnPropertyNames(proxy)</code>、<code>Object.getOwnPropertySymbols(proxy)</code>，<code>Object.keys(proxy)</code>、<code>for...in</code>循环。</li><li>参数</li></ol><ul><li><code>target</code> 目标对象</li></ul><ol start="3"><li>该方法返回目标对象所有自身的属性的属性名组成的数组，或者可枚举对象。</li><li>该拦截器可以拦截以下操作</li></ol><ul><li><code>Object.getOwnPropertyNames()</code></li><li><code>Object.getOwnPropertySymbols()</code></li><li><code>Object.keys()</code>，<code>Object.keys()</code>的返回结果仅包括目标对象自身的可遍历属性。</li><li><code>Reflect.ownKeys()</code></li></ul><ol start="5"><li>数组的元素类型要么是一个 <code>String</code> ，要么是一个 <code>Symbol</code>。结果列表必须包含目标对象的所有不可配置、自有属性的 <code>key</code>。如果目标对象不可扩展，那么结果列表必须包含目标对象的所有自有属性的 <code>key</code>，不能有其它值。否则会报错。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ownKeys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOwnPropertyNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="getownpropertydescriptor" tabindex="-1">getOwnPropertyDescriptor <a class="header-anchor" href="#getownpropertydescriptor" aria-label="Permalink to &quot;getOwnPropertyDescriptor&quot;">​</a></h3><ol><li><code>getOwnPropertyDescriptor(target, propKey)</code>，方法是<code>Object.getOwnPropertyDescriptor()</code>(可以获取目标对象中属性的描述对象)的钩子。</li><li>参数</li></ol><ul><li><code>target</code> 目标对象</li><li><code>propKey</code> 对象的属性名</li></ul><ol start="3"><li>方法必须返回一个 <code>object</code> 或 <code>undefined</code>，否则会报错。</li><li>方法用于拦截</li></ol><ul><li><code>Object.getOwnPropertyDescriptor(proxy, propKey)</code></li><li><code>Reflect.getOwnPropertyDescriptor(target, propKey)</code>，</li></ul><ol start="5"><li>如果属性作为目标对象的不可配置的属性存在，则该属性无法报告为不存在。</li></ol><h3 id="defineproperty" tabindex="-1">defineProperty <a class="header-anchor" href="#defineproperty" aria-label="Permalink to &quot;defineProperty&quot;">​</a></h3><ol><li><code>defineProperty(target, propKey, descriptor)</code>，方法用于拦截对对象属性进行自定义配置的操作。</li><li>参数</li></ol><ul><li><code>target</code> 目标对象</li><li><code>propKey</code> 对象的属性名</li><li><code>descriptor</code> 待定义或修改的属性的描述符</li></ul><ol start="3"><li>方法必须以一个 <code>Boolean</code> 返回，表示定义该属性的操作成功与否。</li><li>该方法会拦截目标对象的以下操作：</li></ol><ul><li><code>Object.defineProperty(proxy, propKey, propDesc)</code></li><li><code>Reflect.defineProperty()</code></li></ul><ol start="5"><li>如果目标对象不可扩展， 将不能添加属性。如果目标对象的属性不可配置，也不能对其进行添加或修改属性。在严格模式下，<code>false</code> 作为方法的返回值的话将会抛出 <code>TypeError</code>异常。</li></ol><h3 id="preventextensions" tabindex="-1">preventExtensions <a class="header-anchor" href="#preventextensions" aria-label="Permalink to &quot;preventExtensions&quot;">​</a></h3><ol><li><code>preventExtensions(target)</code></li><li>参数</li></ol><ul><li><code>target</code> 目标对象</li></ul><ol start="3"><li>返回一个布尔值，是否定义成功。</li><li>拦截</li></ol><ul><li><code>Object.preventExtensions(proxy)</code></li><li><code>Reflect.preventExtensions()</code>。</li></ul><ol start="5"><li>如果目标对象是可扩展的，那么只能返回 <code>false</code>。</li></ol><h3 id="getprototypeof" tabindex="-1">getPrototypeOf <a class="header-anchor" href="#getprototypeof" aria-label="Permalink to &quot;getPrototypeOf&quot;">​</a></h3><ol><li><code>getPrototypeOf(target)</code>，当读取代理对象的原型时，该方法就会被调用。</li><li>参数</li></ol><ul><li><code>target</code> 目标对象</li></ul><ol start="3"><li>返回值是一个对象或者<code>null</code></li><li>方法用于拦截:</li></ol><ul><li><code>Object.getPrototypeOf(proxy)</code></li><li><code>Reflect.getPrototypeOf(proxy)</code></li><li>或者访问对象原型对象的操作。</li></ul><ol start="5"><li><code>getPrototypeOf()</code>方法如果返回的不是对象也不是 <code>null</code>。或者目标对象是不可扩展的，且 <code>getPrototypeOf()</code> 方法返回的原型不是目标对象本身的原型，就会报错。</li></ol><h3 id="isextensible" tabindex="-1">isExtensible <a class="header-anchor" href="#isextensible" aria-label="Permalink to &quot;isExtensible&quot;">​</a></h3><ol><li><code>isExtensible(target)</code></li><li>参数</li></ol><ul><li><code>target</code> 目标对象</li></ul><ol start="3"><li>方法必须返回一个 <code>Boolean</code> 值或可转换成 <code>Boolean</code> 的值，否则报错。</li><li>方法用于拦截</li></ol><ul><li><code>Object.isExtensible()</code></li><li><code>Reflect.isExtensible()</code></li></ul><ol start="5"><li><code>Object.isExtensible(proxy)</code> 必须同 <code>Object.isExtensible(target)</code> 返回相同值。</li></ol><h3 id="setprototypeof" tabindex="-1">setPrototypeOf <a class="header-anchor" href="#setprototypeof" aria-label="Permalink to &quot;setPrototypeOf&quot;">​</a></h3><ol><li><code>setPrototypeOf(target, proto)</code></li><li>参数</li></ol><ul><li><code>target</code> 目标对象</li><li><code>proto</code> 要给目标对象设置的原型对象。</li></ul><ol start="3"><li>返回一个布尔值，表示是否设置成功。</li><li>方法主要用来拦截</li></ol><ul><li><code>Object.setPrototypeOf()</code></li><li><code>Reflect.setPrototypeOf()</code></li></ul><ol start="5"><li>如果 <code>target</code> 不可扩展，原型参数必须与 <code>Object.getPrototypeOf(target)</code> 的值相同。</li></ol><h3 id="construct" tabindex="-1">construct <a class="header-anchor" href="#construct" aria-label="Permalink to &quot;construct&quot;">​</a></h3><ol><li><code>construct(target, argumentsList, newTarget)</code>，拦截 <code>Proxy</code> 实例作为构造函数调用的操作。</li><li>参数</li></ol><ul><li><code>target</code> 目标对象</li><li><code>argumentsList</code>，<code>constructor</code> 的参数列表。</li><li><code>newTarget</code>，</li></ul><ol start="3"><li>方法必须返回一个对象，否则会报错。</li><li>该拦截器可以拦截以下操作</li></ol><ul><li><code>new proxy(...args)</code></li><li><code>Reflect.construct()</code></li></ul><ol start="5"><li>为了使 <code>new</code> 操作符在生成的 <code>Proxy</code> 对象上生效，用于初始化代理的目标对象自身必须具有 [[Construct]] 内部方法。</li></ol>`,92),p=[l];function t(h,r,k,o,d,c){return a(),i("div",null,p)}const g=s(e,[["render",t]]);export{y as __pageData,g as default};
