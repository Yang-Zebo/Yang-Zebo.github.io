import{_ as s,c as i,o as e,a2 as a}from"./chunks/framework.BLHWSx9w.js";const g=JSON.parse('{"title":"前端存储","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Others/Expand/01/01_05.md","filePath":"guide/Others/Expand/01/01_05.md","lastUpdated":1696650549000}'),o={name:"guide/Others/Expand/01/01_05.md"},n=a(`<h1 id="前端存储" tabindex="-1">前端存储 <a class="header-anchor" href="#前端存储" aria-label="Permalink to &quot;前端存储&quot;">​</a></h1><h2 id="_1-cookie" tabindex="-1">1. cookie <a class="header-anchor" href="#_1-cookie" aria-label="Permalink to &quot;1. cookie&quot;">​</a></h2><ol><li><p>基本使用<code>document.cookie = &#39;test=doctorhou&#39;</code>，建议不要使用过量，因为<code>cookie</code>在每次请求的时候都会被带上，会增大请求包的大小。</p></li><li><p><code>cookie</code> 可以设置访问域。如果设置 <code>cookie</code> 的时候，设定了 <code>cookie</code> 的访问域名为一个顶级域名，则可以达到几个子域名共享 <code>cookie</code> 的效果。有些重要信息，如用户的唯一标识，建议给这些 <code>cookie</code> 字段加上 <code>HttpOnly</code> 标识。加上了这个标识的话，我们的客户端 <code>js</code> 是无法读到与写入加了标识的 <code>cookie</code> 字段的，这样非常安全。</p></li><li><p><code>cookie</code> 可以设置到期时间，超时的话 <code>cookie</code> 将失效。如果没有设定，那么 <code>cookie</code> 就是 <code>session</code> 级别的。这个级别的意思是在未关闭浏览器的情况下，所有的 <code>tab</code> 级别的页面或新开，或刷新，均属于一个 <code>session</code>。</p></li><li><p>建议一般用来存储一些同步访问页面的时候必须要被带到服务端的信息，比如，网站的用户登录信息。</p></li></ol><h2 id="_2-sessionstorage" tabindex="-1">2. sessionStorage <a class="header-anchor" href="#_2-sessionstorage" aria-label="Permalink to &quot;2. sessionStorage&quot;">​</a></h2><ol><li><code>sessionStorage</code> 属于 <code>webstorage</code> 的一种，与 <code>localStorage</code> 类似可以存储 <code>k-v</code> 形式的数据，使用方法非常简单。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sessionStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;yzb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sessionStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li><code>sessionStorage</code>，是 <code>session</code> 级别的存储，并不同于 <code>cookie</code>，是以 <code>tab</code> 为级别的 <code>session</code>。存储于客户端，服务端是无法直接拿到的。相比于 <code>cookie</code>，<code>sessionStorage</code> 的访问限制更高一些。</li></ol><ul><li>只有当前设定 <code>sessionStorage</code> 的域下才能访问，而且不同的两个 <code>tab</code> 之间不能互通。</li><li>在新开的 <code>tab</code> 下，或者关闭本 <code>TAB</code> 再打开同一个网站，也是无法访问到之前种的 <code>sessionStorage</code> 的。</li><li>而本 <code>tab</code> 刷新的时候，<code>sessionStorage</code> 确是可以访问的。</li></ul><h2 id="_3-localstorage" tabindex="-1">3. localStorage <a class="header-anchor" href="#_3-localstorage" aria-label="Permalink to &quot;3. localStorage&quot;">​</a></h2><ol><li><code>localStorage</code> 可以存储 <code>k-v</code> 形式的数据。存储的值需要是字符串类型，没法直接存储对象，但是可以将对象序列化为字符串再存入。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doctorhou </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;yzb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  describe: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;高大、威猛、帅气&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存储</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(doctorhou))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="2"><li><code>localStorage</code> 的存储周期比 <code>sessionStorage</code> 长，如果用户不清理的话，是可以永久存储的。或者浏览器有时候为了节省，去清除数据。</li><li><code>localStorage</code> 的访问域默认设定为设置 <code>localStorage</code> 的当前域名下，其他域名不可以取。这点与 <code>sessionStorage</code> 相同，但是 <code>localStorage</code> 设定后，新开 相同域名的 <code>tab</code> 是可以访问到的。</li><li>如果有一些数据，服务器难以承载其压力，但又要与用户的信息绑定的话，可以使用 <code>localStorage</code> 存储一些状态，这样即能缓解服务端压力，也可以存储用户的数据。</li></ol>`,12),l=[n];function t(d,c,h,p,k,r){return e(),i("div",null,l)}const b=s(o,[["render",t]]);export{g as __pageData,b as default};
