import{_ as s,c as a,o as i,a2 as e}from"./chunks/framework.BLHWSx9w.js";const u=JSON.parse('{"title":"其他事件","description":"","frontmatter":{},"headers":[],"relativePath":"guide/JavaScript/WebApi/ShiJian/07.md","filePath":"guide/JavaScript/WebApi/ShiJian/07.md","lastUpdated":1721114433000}'),n={name:"guide/JavaScript/WebApi/ShiJian/07.md"},l=e(`<h1 id="其他事件" tabindex="-1">其他事件 <a class="header-anchor" href="#其他事件" aria-label="Permalink to &quot;其他事件&quot;">​</a></h1><h2 id="_1-资源事件" tabindex="-1">1. 资源事件 <a class="header-anchor" href="#_1-资源事件" aria-label="Permalink to &quot;1. 资源事件&quot;">​</a></h2><h3 id="beforeunload-事件" tabindex="-1">beforeunload 事件 <a class="header-anchor" href="#beforeunload-事件" aria-label="Permalink to &quot;beforeunload 事件&quot;">​</a></h3><ol><li><code>beforeunload</code>事件在窗口、文档、各种资源将要卸载前触发。它可以用来防止用户不小心卸载资源。</li><li>如果该事件对象的<code>returnValue</code>属性是一个非空字符串，那么浏览器就会弹出一个对话框，询问用户是否要卸载该资源。如果用户点击“取消”按钮，资源就不会卸载。</li></ol><ul><li>用户指定的字符串可能无法显示，浏览器会展示预定义的字符串。</li><li>浏览器对这个事件的行为很不一致。</li><li>一旦使用了<code>beforeunload</code> 事件，浏览器就不会缓存当前网页，使用“回退”按钮将重新向服务器请求网页。</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeunload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.returnValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;你确定离开吗？&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="unload-事件" tabindex="-1">unload 事件 <a class="header-anchor" href="#unload-事件" aria-label="Permalink to &quot;unload 事件&quot;">​</a></h3><ol><li><code>unload</code>事件在窗口关闭或者<code>document</code>对象将要卸载时触发。它的触发顺序排在<code>beforeunload</code>、<code>pagehide</code>事件后面。</li><li><code>unload</code>事件发生时，文档处于一个特殊状态。所有资源依然存在，但是对用户来说都不可见，UI 互动全部无效。</li><li>这个事件是无法取消的，即使在监听函数里面抛出错误，也不能停止文档的卸载。</li></ol><h3 id="load-事件" tabindex="-1">load 事件 <a class="header-anchor" href="#load-事件" aria-label="Permalink to &quot;load 事件&quot;">​</a></h3><ol><li><code>load</code>事件在页面或某个资源加载成功时触发。</li><li>页面或资源从浏览器缓存加载，并不会触发<code>load</code>事件。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;所有资源都加载完成&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="error-事件" tabindex="-1">error 事件 <a class="header-anchor" href="#error-事件" aria-label="Permalink to &quot;error 事件&quot;">​</a></h3><ol><li><code>error</code>事件是在页面或资源加载失败时触发。</li><li><code>abort</code>事件在用户取消加载时触发。</li></ol><h2 id="_2-网页事件" tabindex="-1">2. 网页事件 <a class="header-anchor" href="#_2-网页事件" aria-label="Permalink to &quot;2. 网页事件&quot;">​</a></h2><h3 id="domcontentloaded-事件" tabindex="-1">DOMContentLoaded 事件 <a class="header-anchor" href="#domcontentloaded-事件" aria-label="Permalink to &quot;DOMContentLoaded 事件&quot;">​</a></h3><ol><li>网页下载并解析完成以后，浏览器就会在<code>document</code>对象上触发 <code>DOMContentLoaded</code> 事件。</li><li>这个事件比<code>load</code>事件，发生时间早得多。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOMContentLoaded&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOM生成&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="readystatechange-事件" tabindex="-1">readystatechange 事件 <a class="header-anchor" href="#readystatechange-事件" aria-label="Permalink to &quot;readystatechange 事件&quot;">​</a></h3><ol><li><code>readystatechange</code>事件当 <code>Document</code> 对象和 <code>XMLHttpRequest</code> 对象的<code>readyState</code>属性发生变化时触发。</li><li><code>document.readyState</code>有三个可能的值：</li></ol><ul><li><code>loading</code>（网页正在加载）</li><li><code>interactive</code>（网页已经解析完成，但是外部资源仍然处在加载状态）</li><li><code>complete</code>（网页和所有外部资源已经结束加载，load 事件即将触发）。</li></ul><h2 id="_3-窗口事件" tabindex="-1">3. 窗口事件 <a class="header-anchor" href="#_3-窗口事件" aria-label="Permalink to &quot;3. 窗口事件&quot;">​</a></h2><h3 id="scroll-事件" tabindex="-1">scroll 事件 <a class="header-anchor" href="#scroll-事件" aria-label="Permalink to &quot;scroll 事件&quot;">​</a></h3><ol><li><code>scroll</code>事件在文档或文档元素滚动时触发，主要出现在用户拖动滚动条。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scroll&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, callback)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>该事件会连续地大量触发，所以它的监听函数之中不应该有非常耗费计算的操作。</li></ol><h3 id="resize-事件" tabindex="-1">resize 事件 <a class="header-anchor" href="#resize-事件" aria-label="Permalink to &quot;resize 事件&quot;">​</a></h3><ol><li><code>resize</code>事件在改变浏览器窗口大小时触发，主要发生在<code>window</code>对象上面。</li><li>该事件也会连续地大量触发，所以最好像上面的<code>scroll</code>事件一样，控制事件触发频率。</li></ol><h3 id="fullscreenchange" tabindex="-1">fullscreenchange <a class="header-anchor" href="#fullscreenchange" aria-label="Permalink to &quot;fullscreenchange&quot;">​</a></h3><ol><li><code>fullscreenchange</code>事件在进入或退出全屏状态时触发，该事件发生在<code>document</code>对象上面。</li><li><code>fullscreenerror</code>事件在浏览器无法切换到全屏状态时触发。</li></ol><h2 id="_4-剪贴板事件" tabindex="-1">4. 剪贴板事件 <a class="header-anchor" href="#_4-剪贴板事件" aria-label="Permalink to &quot;4. 剪贴板事件&quot;">​</a></h2><h3 id="事件概述" tabindex="-1">事件概述 <a class="header-anchor" href="#事件概述" aria-label="Permalink to &quot;事件概述&quot;">​</a></h3><ol><li><code>cut</code>：将选中的内容从文档中移除，加入剪贴板时触发。</li><li><code>copy</code>：进行复制动作时触发。</li><li><code>paste</code>：剪贴板内容粘贴到文档后触发。</li></ol><h3 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h3><ol><li>如果希望禁止输入框的粘贴事件，可以使用下面的代码，使用户无法在<code>&lt;input&gt;</code>输入框里面粘贴内容。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">inputElement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;paste&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li><code>cut</code>、<code>copy</code>、<code>paste</code> 这三个事件的事件对象都是 <code>ClipboardEvent</code> 接口的实例。</li></ol><h2 id="_5-焦点事件" tabindex="-1">5. 焦点事件 <a class="header-anchor" href="#_5-焦点事件" aria-label="Permalink to &quot;5. 焦点事件&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ol><li>焦点事件发生在元素节点和<code>document</code>对象上面，与获得或失去焦点相关。</li></ol><h3 id="事件类型" tabindex="-1">事件类型 <a class="header-anchor" href="#事件类型" aria-label="Permalink to &quot;事件类型&quot;">​</a></h3><ol><li><code>focus</code>：元素节点获得焦点后触发，该事件不会冒泡。</li><li><code>blur</code>：元素节点失去焦点后触发，该事件不会冒泡。</li><li><code>focusin</code>：元素节点将要获得焦点时触发，发生在 focus 事件之前。该事件会冒泡。</li><li><code>focusout</code>：元素节点将要失去焦点时触发，发生在 blur 事件之前。该事件会冒泡。</li></ol><h3 id="focusevent-实例属性" tabindex="-1">FocusEvent 实例属性 <a class="header-anchor" href="#focusevent-实例属性" aria-label="Permalink to &quot;FocusEvent 实例属性&quot;">​</a></h3><ol><li><code>FocusEvent.target</code>：事件的目标节点。</li><li><code>FocusEvent.relatedTarget</code>：</li></ol><ul><li>对于<code>focusin</code>事件，返回失去焦点的节点；</li><li>对于<code>focusout</code>事件，返回将要接受焦点的节点；</li><li>对于<code>focus和blur</code>事件，返回<code>null</code></li></ul><h3 id="注意-1" tabindex="-1">注意 <a class="header-anchor" href="#注意-1" aria-label="Permalink to &quot;注意&quot;">​</a></h3><ol><li><code>focus</code>和<code>blur</code>事件不会冒泡，只能在捕获阶段触发，所以<code>addEventListener</code>方法的第三个参数需要设为<code>true</code>。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">form.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;focus&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.target.style.background </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pink&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">form.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;blur&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.target.style.background </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,47),t=[l];function h(d,o,r,p,c,k){return i(),a("div",null,t)}const b=s(n,[["render",h]]);export{u as __pageData,b as default};
