import{_ as e,c as o,o as c,a4 as d}from"./chunks/framework.DMnPLqTg.js";const v=JSON.parse('{"title":"触摸事件","description":"","frontmatter":{},"headers":[],"relativePath":"guide/JavaScript/WebApi/ShiJian/06.md","filePath":"guide/JavaScript/WebApi/ShiJian/06.md","lastUpdated":1721114433000}'),i={name:"guide/JavaScript/WebApi/ShiJian/06.md"},a=d('<h1 id="触摸事件" tabindex="-1">触摸事件 <a class="header-anchor" href="#触摸事件" aria-label="Permalink to &quot;触摸事件&quot;">​</a></h1><h2 id="_1-概述" tabindex="-1">1. 概述 <a class="header-anchor" href="#_1-概述" aria-label="Permalink to &quot;1. 概述&quot;">​</a></h2><h3 id="触摸-api-组成" tabindex="-1">触摸 API 组成 <a class="header-anchor" href="#触摸-api-组成" aria-label="Permalink to &quot;触摸 API 组成&quot;">​</a></h3><ol><li><code>Touch</code>：一个触摸点。</li><li><code>TouchList</code>：多个触摸点的集合。</li><li><code>TouchEvent</code>：触摸引发的事件实例。</li></ol><h3 id="触摸与鼠标事件" tabindex="-1">触摸与鼠标事件 <a class="header-anchor" href="#触摸与鼠标事件" aria-label="Permalink to &quot;触摸与鼠标事件&quot;">​</a></h3><ol><li>很多时候，触摸事件和鼠标事件同时触发，即使这个时候并没有用到鼠标。这是为了让那些只定义鼠标事件、没有定义触摸事件的代码，在触摸屏的情况下仍然能用。</li><li>如果想避免这种情况，可以用 <code>event.preventDefault</code> 方法阻止发出鼠标事件。</li></ol><h2 id="_2-touch-接口" tabindex="-1">2. Touch 接口 <a class="header-anchor" href="#_2-touch-接口" aria-label="Permalink to &quot;2. Touch 接口&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ol><li><code>Touch</code> 接口代表单个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。</li></ol><h3 id="touch-构造函数" tabindex="-1">Touch 构造函数 <a class="header-anchor" href="#touch-构造函数" aria-label="Permalink to &quot;Touch 构造函数&quot;">​</a></h3><ol><li>浏览器原生提供<code>Touch</code>构造函数，用来生成<code>Touch</code>实例。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> touch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Touch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(touchOptions)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li><code>Touch</code>构造函数接受一个配置对象作为参数，它有以下属性。</li></ol><ul><li><code>identifier</code>：必需，类型为整数，表示触摸点的唯一 <code>ID</code>。</li><li><code>target</code>：必需，类型为元素节点，表示触摸点开始时所在的网页元素。</li><li><code>clientX</code>：可选，类型为数值，表示触摸点相对于浏览器窗口左上角的水平距离，默认为<code>0</code>。</li><li><code>clientY</code>：可选，类型为数值，表示触摸点相对于浏览器窗口左上角的垂直距离，默认为<code>0</code>。</li><li><code>screenX</code>：可选，类型为数值，表示触摸点相对于屏幕左上角的水平距离，默认为<code>0</code>。</li><li><code>screenY</code>：可选，类型为数值，表示触摸点相对于屏幕左上角的垂直距离，默认为<code>0</code>。</li><li><code>pageX</code>：可选，类型为数值，表示触摸点相对于网页左上角的水平位置（即包括页面的滚动距离），默认为<code>0</code>。</li><li><code>pageY</code>：可选，类型为数值，表示触摸点相对于网页左上角的垂直位置（即包括页面的滚动距离），默认为<code>0</code>。</li><li><code>radiusX</code>：可选，类型为数值，表示触摸点周围受到影响的椭圆范围的 <code>X</code> 轴半径，默认为<code>0</code>。</li><li><code>radiusY</code>：可选：类型为数值，表示触摸点周围受到影响的椭圆范围的 <code>Y</code> 轴半径，默认为<code>0</code>。</li><li><code>rotationAngle</code>：可选，类型为数值，表示触摸区域的椭圆的旋转角度，单位为度数，在<code>0</code>到<code>90</code>度之间，默认值为<code>0</code>。</li><li><code>force</code>：可选，类型为数值，范围在<code>0</code>到<code>1</code>之间，表示触摸压力。<code>0</code>代表没有压力，<code>1</code>代表硬件所能识别的最大压力，默认为<code>0</code>。</li></ul><h3 id="接口的实例属性" tabindex="-1">接口的实例属性 <a class="header-anchor" href="#接口的实例属性" aria-label="Permalink to &quot;接口的实例属性&quot;">​</a></h3><ol><li><code>Touch.identifier</code>属性返回一个整数，表示触摸点的唯一 <code>ID</code>。这个值在整个触摸过程保持不变，直到触摸事件结束。</li><li><code>Touch.screenX</code>，<code>Touch.screenY</code>，分别表示触摸点相对于屏幕左上角的横坐标和纵坐标，与页面是否滚动无关。</li><li><code>Touch.clientX</code>，<code>Touch.clientY</code>，分别表示触摸点相对于浏览器视口左上角的横坐标和纵坐标，与页面是否滚动无关。</li><li><code>Touch.pageX</code>，<code>Touch.pageY</code>，分别表示触摸点相对于当前页面左上角的横坐标和纵坐标，包含了页面滚动带来的位移。</li><li><code>Touch.radiusX</code>，<code>Touch.radiusY</code>，分别返回触摸点周围受到影响的椭圆范围的 <code>X</code> 轴半径和 <code>Y</code> 轴半径，单位为像素。乘以 <code>2</code> 就可以得到触摸范围的宽度和高度。</li><li><code>Touch.rotationAngle</code>属性表示触摸区域的椭圆的旋转角度，单位为度数，在<code>0</code>到<code>90</code>度之间。</li><li><code>Touch.force</code>，属性返回一个<code>0</code>到<code>1</code>之间的数值，表示触摸压力。<code>0</code>代表没有压力，<code>1</code>代表硬件所能识别的最大压力。</li><li><code>Touch.target</code>属性返回一个元素节点，代表触摸发生时所在的那个元素节点。即使触摸点已经离开了这个节点，该属性依然不变。</li></ol><h2 id="_3-touchlist-接口" tabindex="-1">3. TouchList 接口 <a class="header-anchor" href="#_3-touchlist-接口" aria-label="Permalink to &quot;3. TouchList 接口&quot;">​</a></h2><h3 id="概述-1" tabindex="-1">概述 <a class="header-anchor" href="#概述-1" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ol><li><code>TouchList</code>接口表示一组触摸点的集合。它的实例是一个类似数组的对象，成员是<code>Touch</code>的实例对象，表示所有触摸点。</li><li>它的实例主要通过触摸事件的<code>TouchEvent.touches</code>、<code>TouchEvent.changedTouches</code>、<code>TouchEvent.targetTouches</code>这几个属性获取。</li></ol><h3 id="实例属性与方法" tabindex="-1">实例属性与方法 <a class="header-anchor" href="#实例属性与方法" aria-label="Permalink to &quot;实例属性与方法&quot;">​</a></h3><ol><li><code>TouchList.length</code>：数值，表示成员数量（即触摸点的数量）。</li><li><code>TouchList.item()</code>：返回指定位置的成员，它的参数是该成员的位置编号（从零开始）。</li></ol><h2 id="_4-touchevent-接口" tabindex="-1">4. TouchEvent 接口 <a class="header-anchor" href="#_4-touchevent-接口" aria-label="Permalink to &quot;4. TouchEvent 接口&quot;">​</a></h2><h3 id="概述-2" tabindex="-1">概述 <a class="header-anchor" href="#概述-2" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ol><li><code>TouchEvent</code> 接口继承了 <code>Event</code> 接口，表示由触摸引发的事件实例，通常来自触摸屏或轨迹板。除了被继承的属性以外，它还有一些自己的属性。</li><li>浏览器原生提供<code>TouchEvent()</code>构造函数，用来生成触摸事件的实例。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TouchEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, options)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="touchevent-构造函数" tabindex="-1">TouchEvent 构造函数 <a class="header-anchor" href="#touchevent-构造函数" aria-label="Permalink to &quot;TouchEvent 构造函数&quot;">​</a></h3><ol><li><code>TouchEvent()</code>构造函数可以接受两个参数。</li></ol><ul><li>第一个参数是字符串，表示事件类型；</li><li>第二个参数是事件的配置对象，该参数是可选的，对象的所有属性也是可选的。除了<code>Event</code>接口的配置属性，该接口还有一些自己的配置属性。</li></ul><ol start="2"><li><code>TouchEvent()</code>构造函数第二个参数的配置属性</li></ol><ul><li><code>touches</code>：<code>TouchList</code>实例，代表所有的当前处于活跃状态的触摸点，默认值是一个空数组。</li><li><code>targetTouches</code>：<code>TouchList</code>实例，代表所有处在触摸的目标元素节点内部、且仍然处于活动状态的触摸点，默认值是一个空数组。</li><li><code>changedTouches</code>：<code>TouchList</code>实例，代表本次触摸事件的相关触摸点，默认值是一个空数组。</li><li><code>ctrlKey</code>：布尔值，表示 <code>Ctrl</code> 键是否同时按下，默认值为<code>false</code>。</li><li><code>shiftKey</code>：布尔值，表示 <code>Shift</code> 键是否同时按下，默认值为<code>false</code>。</li><li><code>altKey</code>：布尔值，表示 <code>Alt</code> 键是否同时按下，默认值为<code>false</code>。</li><li><code>metaKey</code>：布尔值，表示 <code>Meta</code> 键是否同时按下，默认值为<code>false</code>。</li></ul><h3 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h3><ol><li><code>TouchEvent.altKey</code>，<code>TouchEvent.ctrlKey</code>，<code>TouchEvent.shiftKey</code>，<code>TouchEvent.metaKey</code>。</li></ol><ul><li><code>TouchEvent.altKey</code>：布尔值，表示触摸时是否按下了 <code>Alt</code> 键。</li><li><code>TouchEvent.ctrlKey</code>：布尔值，表示触摸时是否按下了 <code>Ctrl</code> 键。</li><li><code>TouchEvent.shiftKey</code>：布尔值：表示触摸时是否按下了 <code>Shift</code> 键。</li><li><code>TouchEvent.metaKey</code>：布尔值，表示触摸时是否按下了 <code>Meta</code> 键。</li></ul><ol start="2"><li><code>TouchEvent.changedTouches</code>属性返回一个<code>TouchList</code>实例，成员是一组<code>Touch</code>实例对象，表示本次触摸事件的相关触摸点。</li></ol><ul><li><code>touchstart</code>事件：被激活的触摸点。</li><li><code>touchmove</code>事件：发生变化的触摸点。</li><li><code>touchend</code>事件：消失的触摸点。</li></ul><ol start="3"><li><code>TouchEvent.touches</code>属性返回一个<code>TouchList</code>实例，成员是所有仍然处于活动状态（即触摸中）的触摸点。一般来说，一个手指就是一个触摸点。</li><li><code>TouchEvent.targetTouches</code>属性返回一个<code>TouchList</code>实例，成员是触摸事件的目标元素节点内部、所有仍然处于活动状态（即触摸中）的触摸点。</li></ol><h2 id="_5-触摸事件的种类" tabindex="-1">5. 触摸事件的种类 <a class="header-anchor" href="#_5-触摸事件的种类" aria-label="Permalink to &quot;5. 触摸事件的种类&quot;">​</a></h2><ol><li><code>touchstart</code>：用户开始触摸时触发，它的 <code>target</code> 属性返回发生触摸的元素节点。</li><li><code>touchend</code>：用户不再接触触摸屏时（或者移出屏幕边缘时）触发，它的 <code>target</code> 属性与 <code>touchstart</code> 事件一致的，就是开始触摸时所在的元素节点。它的 <code>changedTouches</code> 属性返回一个 <code>TouchList</code> 实例，包含所有不再触摸的触摸点（即 <code>Touch</code> 实例对象）。</li><li><code>touchmove</code>：用户移动触摸点时触发，它的 <code>target</code> 属性与 <code>touchstart</code> 事件一致。如果触摸的半径、角度、力度发生变化，也会触发该事件。</li><li><code>touchcancel</code>：触摸点取消时触发，比如在触摸区域跳出一个模态窗口、触摸点离开了文档区域（进入浏览器菜单栏）、用户的触摸点太多，超过了支持的上限（自动取消早先的触摸点）。</li></ol>',38),l=[a];function t(h,s,n,r,u,p){return c(),o("div",null,l)}const b=e(i,[["render",t]]);export{v as __pageData,b as default};
