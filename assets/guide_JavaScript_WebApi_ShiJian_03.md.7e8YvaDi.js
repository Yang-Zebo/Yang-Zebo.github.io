import{_ as e,c as o,o as t,a4 as a}from"./chunks/framework.DMnPLqTg.js";const E=JSON.parse('{"title":"鼠标事件","description":"","frontmatter":{},"headers":[],"relativePath":"guide/JavaScript/WebApi/ShiJian/03.md","filePath":"guide/JavaScript/WebApi/ShiJian/03.md","lastUpdated":1721114433000}'),i={name:"guide/JavaScript/WebApi/ShiJian/03.md"},s=a(`<h1 id="鼠标事件" tabindex="-1">鼠标事件 <a class="header-anchor" href="#鼠标事件" aria-label="Permalink to &quot;鼠标事件&quot;">​</a></h1><h2 id="_1-鼠标事件的种类" tabindex="-1">1. 鼠标事件的种类 <a class="header-anchor" href="#_1-鼠标事件的种类" aria-label="Permalink to &quot;1. 鼠标事件的种类&quot;">​</a></h2><h3 id="点击事件" tabindex="-1">点击事件 <a class="header-anchor" href="#点击事件" aria-label="Permalink to &quot;点击事件&quot;">​</a></h3><ol><li><code>click</code>：按下鼠标（通常是按下主按钮）时触发。用户在同一个位置先触发<code>mousedown</code>，再触发<code>mouseup</code>，<code>click</code>最后触发。</li><li><code>dblclick</code>：在同一个元素上双击鼠标时触发。<code>dblclick</code>事件则会在<code>mousedown</code>、<code>mouseup</code>、<code>click</code>之后触发。</li><li><code>mousedown</code>：按下鼠标键时触发。</li><li><code>mouseup</code>：释放按下的鼠标键时触发。</li></ol><h3 id="移动事件" tabindex="-1">移动事件 <a class="header-anchor" href="#移动事件" aria-label="Permalink to &quot;移动事件&quot;">​</a></h3><ol><li><code>mousemove</code>：当鼠标在一个节点内部移动时触发。当鼠标持续移动时，该事件会连续触发。为了避免性能问题，建议对该事件的监听函数做一些限定，比如限定一段时间内只能运行一次。</li><li><code>mouseenter</code>：鼠标进入一个节点时触发，进入子节点不会触发这个事件。</li><li><code>mouseleave</code>：鼠标离开一个节点时触发，离开父节点不会触发这个事件。</li><li><code>mouseover</code>：鼠标进入一个节点时触发，进入子节点会再一次触发这个事件。</li><li><code>mouseout</code>：鼠标离开一个节点时触发，离开父节点也会触发这个事件。</li></ol><h3 id="其他事件" tabindex="-1">其他事件 <a class="header-anchor" href="#其他事件" aria-label="Permalink to &quot;其他事件&quot;">​</a></h3><ol><li><code>contextmenu</code>：按下鼠标右键时（上下文菜单出现前）触发，或者按下“上下文”菜单键时触发。</li><li><code>wheel</code>：滚动鼠标的滚轮时触发，该事件继承的是<code>WheelEvent</code>接口。</li></ol><h2 id="_2-mouseevent-接口" tabindex="-1">2. MouseEvent 接口 <a class="header-anchor" href="#_2-mouseevent-接口" aria-label="Permalink to &quot;2. MouseEvent 接口&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ol><li><code>MouseEvent</code>接口代表了鼠标相关的事件，鼠标相关事件包括滚轮事件和拖拉事件所产生的事件对象都是<code>MouseEvent</code>实例。</li><li><code>MouseEvent</code>接口继承了<code>Event</code>接口，所以拥有<code>Event</code>的所有属性和方法，并且还提供鼠标独有的属性和方法。</li></ol><h3 id="构造函数-mouseevent" tabindex="-1">构造函数 MouseEvent() <a class="header-anchor" href="#构造函数-mouseevent" aria-label="Permalink to &quot;构造函数 MouseEvent()&quot;">​</a></h3><ol><li>浏览器原生提供一个<code>MouseEvent()</code>构造函数，用于新建一个<code>MouseEvent</code>实例。</li><li><code>MouseEvent()</code>构造函数接受两个参数。</li></ol><ul><li>第一个参数是字符串，表示事件名称；</li><li>第二个参数是一个事件配置对象，除了<code>Event</code>接口的实例配置属性，该对象可以配置很多属性，所有属性都是可选的。</li></ul><ol start="3"><li><code>MouseEvent()</code>构造函数第二个参数的配置属性。</li></ol><ul><li><code>screenX</code>：数值，鼠标相对于屏幕的水平位置（单位像素），默认值为 0，设置该属性不会移动鼠标。</li><li><code>screenY</code>：数值，鼠标相对于屏幕的垂直位置（单位像素），其他与 <code>screenX</code> 相同。</li><li><code>clientX</code>：数值，鼠标相对于程序窗口的水平位置（单位像素），默认值为 <code>0</code>，设置该属性不会移动鼠标。</li><li><code>clientY</code>：数值，鼠标相对于程序窗口的垂直位置（单位像素），其他与 <code>clientX</code> 相同。</li><li><code>ctrlKey</code>：布尔值，是否同时按下了 <code>Ctrl</code> 键，默认值为 <code>false</code>。</li><li><code>shiftKey</code>：布尔值，是否同时按下了 <code>Shift</code> 键，默认值为 <code>false</code>。</li><li><code>altKey</code>：布尔值，是否同时按下 <code>Alt</code> 键，默认值为 <code>false</code>。</li><li><code>metaKey</code>：布尔值，是否同时按下 <code>Meta</code> 键，默认值为 <code>false</code>。</li><li><code>button</code>：数值，表示按下了哪一个鼠标按键，默认值为 <code>0</code>，表示按下主键（通常是鼠标的左键）或者当前事件没有定义这个属性；<code>1</code> 表示按下辅助键（通常是鼠标的中间键），<code>2</code> 表示按下次要键（通常是鼠标的右键）。</li><li><code>buttons</code>：数值，表示按下了鼠标的哪些键，是一个三个比特位的二进制值，默认为 <code>0</code>（没有按下任何键）。<code>1</code>（二进制 001）表示按下主键（通常是左键），<code>2</code>（二进制 010）表示按下次要键（通常是右键），<code>4</code>（二进制 100）表示按下辅助键（通常是中间键）。因此，如果返回 <code>3</code>（二进制 011）就表示同时按下了左键和右键。</li><li><code>relatedTarget</code>：节点对象，表示事件的相关节点，默认为 <code>null</code>。</li></ul><h2 id="_3-mouseevent-实例的属性" tabindex="-1">3. MouseEvent 实例的属性 <a class="header-anchor" href="#_3-mouseevent-实例的属性" aria-label="Permalink to &quot;3. MouseEvent 实例的属性&quot;">​</a></h2><h3 id="mouseevent-altkey-mouseevent-ctrlkey-mouseevent-metakey-mouseevent-shiftkey" tabindex="-1">MouseEvent.altKey，MouseEvent.ctrlKey，MouseEvent.metaKey，MouseEvent.shiftKey <a class="header-anchor" href="#mouseevent-altkey-mouseevent-ctrlkey-mouseevent-metakey-mouseevent-shiftkey" aria-label="Permalink to &quot;MouseEvent.altKey，MouseEvent.ctrlKey，MouseEvent.metaKey，MouseEvent.shiftKey&quot;">​</a></h3><ol><li>这四个属性都返回一个布尔值，表示在事件发生时，是否按下相对应的按键。</li></ol><ul><li><code>altKey</code>属性：<code>Alt</code> 键</li><li><code>ctrlKey</code>属性：<code>Ctrl</code> 键</li><li><code>metaKey</code>属性：<code>Meta</code> 键（Mac 键盘是 Command 键，Windows 键盘是 Windows 键）</li><li><code>shiftKey</code>属性：<code>Shift</code> 键</li></ul><h3 id="mouseevent-button-mouseevent-buttons" tabindex="-1">MouseEvent.button，MouseEvent.buttons <a class="header-anchor" href="#mouseevent-button-mouseevent-buttons" aria-label="Permalink to &quot;MouseEvent.button，MouseEvent.buttons&quot;">​</a></h3><ol><li><code>MouseEvent.button</code>属性返回一个数值，表示事件发生时按下了鼠标的哪个键。该属性只读。</li></ol><ul><li><code>0</code>：按下主键（通常是左键），或者该事件没有初始化这个属性。</li><li><code>1</code>：按下辅助键（通常是中键或者滚轮键）。</li><li><code>2</code>：按下次键（通常是右键）。</li></ul><ol start="2"><li><code>MouseEvent.buttons</code>属性返回一个三个比特位的值，表示同时按下了哪些键。它用来处理同时按下多个鼠标键的情况。该属性只读。</li></ol><ul><li><code>1</code>：二进制为<code>001</code>（十进制的 1），表示按下左键。</li><li><code>2</code>：二进制为<code>010</code>（十进制的 2），表示按下右键。</li><li><code>4</code>：二进制为<code>100</code>（十进制的 4），表示按下中键或滚轮键。</li></ul><h3 id="mouseevent-clientx-mouseevent-clienty" tabindex="-1">MouseEvent.clientX，MouseEvent.clientY <a class="header-anchor" href="#mouseevent-clientx-mouseevent-clienty" aria-label="Permalink to &quot;MouseEvent.clientX，MouseEvent.clientY&quot;">​</a></h3><ol><li><code>MouseEvent.clientX</code>属性返回鼠标位置相对于浏览器窗口左上角的水平坐标（单位像素）。</li><li><code>MouseEvent.clientY</code>属性返回垂直坐标。</li><li>这两个属性都是只读属性。</li></ol><h3 id="mouseevent-movementx-mouseevent-movementy" tabindex="-1">MouseEvent.movementX，MouseEvent.movementY <a class="header-anchor" href="#mouseevent-movementx-mouseevent-movementy" aria-label="Permalink to &quot;MouseEvent.movementX，MouseEvent.movementY&quot;">​</a></h3><ol><li>MouseEvent.movementX 属性返回当前位置与上一个 mousemove 事件之间的水平距离（单位像素）。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentEvent.movementX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentEvent.screenX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> previousEvent.screenX</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>MouseEvent.movementY 属性返回当前位置与上一个 mousemove 事件之间的垂直距离（单位像素）。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentEvent.movementY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentEvent.screenY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> previousEvent.screenY</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>这两个属性都是只读属性。</li></ol><h3 id="mouseevent-screenx-mouseevent-screeny" tabindex="-1">MouseEvent.screenX，MouseEvent.screenY <a class="header-anchor" href="#mouseevent-screenx-mouseevent-screeny" aria-label="Permalink to &quot;MouseEvent.screenX，MouseEvent.screenY&quot;">​</a></h3><ol><li><code>MouseEvent.screenX</code>属性返回鼠标位置相对于屏幕左上角的水平坐标（单位像素）。</li><li><code>MouseEvent.screenY</code>属性返回垂直坐标。</li><li>这两个属性都是只读属性。</li></ol><h3 id="mouseevent-offsetx-mouseevent-offsety" tabindex="-1">MouseEvent.offsetX，MouseEvent.offsetY <a class="header-anchor" href="#mouseevent-offsetx-mouseevent-offsety" aria-label="Permalink to &quot;MouseEvent.offsetX，MouseEvent.offsetY&quot;">​</a></h3><ol><li><code>MouseEvent.offsetX</code>属性返回鼠标位置与目标节点左侧的<code>padding</code>边缘的水平距离（单位像素）。</li><li><code>MouseEvent.offsetY</code>属性返回与目标节点上方的<code>padding</code>边缘的垂直距离。</li><li>这两个属性都是只读属性。</li></ol><h3 id="mouseevent-pagex-mouseevent-pagey" tabindex="-1">MouseEvent.pageX，MouseEvent.pageY <a class="header-anchor" href="#mouseevent-pagex-mouseevent-pagey" aria-label="Permalink to &quot;MouseEvent.pageX，MouseEvent.pageY&quot;">​</a></h3><ol><li><code>MouseEvent.pageX</code>属性返回鼠标位置与文档左侧边缘的距离（单位像素）。</li><li><code>MouseEvent.pageY</code>属性返回与文档上侧边缘的距离（单位像素）。</li><li>它们的返回值都包括文档不可见的部分，这两个属性都是只读。</li></ol><h3 id="mouseevent-relatedtarget" tabindex="-1">MouseEvent.relatedTarget <a class="header-anchor" href="#mouseevent-relatedtarget" aria-label="Permalink to &quot;MouseEvent.relatedTarget&quot;">​</a></h3><ol><li><code>MouseEvent.relatedTarget</code>属性返回事件的相关节点。对于那些没有相关节点的事件，该属性返回<code>null</code>。该属性只读。</li></ol><table tabindex="0"><thead><tr><th>事件名称</th><th>target 属性</th><th>relatedTarget 属性</th></tr></thead><tbody><tr><td>focusin</td><td>接受焦点的节点</td><td>丧失焦点的节点</td></tr><tr><td>focusout</td><td>丧失焦点的节点</td><td>接受焦点的节点</td></tr><tr><td>mouseenter</td><td>将要进入的节点</td><td>将要离开的节点</td></tr><tr><td>mouseleave</td><td>将要离开的节点</td><td>将要进入的节点</td></tr><tr><td>mouseout</td><td>将要离开的节点</td><td>将要进入的节点</td></tr><tr><td>mouseover</td><td>将要进入的节点</td><td>将要离开的节点</td></tr><tr><td>dragenter</td><td>将要进入的节点</td><td>将要离开的节点</td></tr><tr><td>dragexit</td><td>将要离开的节点</td><td>将要进入的节点</td></tr></tbody></table><h2 id="_4-mouseevent-接口的实例方法" tabindex="-1">4. MouseEvent 接口的实例方法 <a class="header-anchor" href="#_4-mouseevent-接口的实例方法" aria-label="Permalink to &quot;4. MouseEvent 接口的实例方法&quot;">​</a></h2><h3 id="mouseevent-getmodifierstate" tabindex="-1">MouseEvent.getModifierState() <a class="header-anchor" href="#mouseevent-getmodifierstate" aria-label="Permalink to &quot;MouseEvent.getModifierState()&quot;">​</a></h3><ol><li><code>MouseEvent.getModifierState</code>方法返回一个布尔值，表示有没有按下特定的<a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState#modifier_keys_on_gecko" target="_blank" rel="noreferrer">功能键</a>。它的参数是一个表示功能键的字符串。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getModifierState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;CapsLock&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 打印是否在点击时按下了大写键</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_5-wheelevent-接口" tabindex="-1">5. WheelEvent 接口 <a class="header-anchor" href="#_5-wheelevent-接口" aria-label="Permalink to &quot;5. WheelEvent 接口&quot;">​</a></h2><h3 id="概述-1" tabindex="-1">概述 <a class="header-anchor" href="#概述-1" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ol><li><code>WheelEvent</code> 接口继承了 <code>MouseEvent</code> 实例，代表鼠标滚轮事件的实例对象。</li><li>目前，鼠标滚轮相关的事件只有一个<code>wheel</code>事件，用户滚动鼠标的滚轮，就生成这个事件的实例。</li><li>浏览器原生提供<code>WheelEvent()</code>构造函数，用来生成<code>WheelEvent</code>实例。</li></ol><h3 id="wheelevent-构造函数" tabindex="-1">WheelEvent() 构造函数 <a class="header-anchor" href="#wheelevent-构造函数" aria-label="Permalink to &quot;WheelEvent() 构造函数&quot;">​</a></h3><ol><li><code>WheelEvent()</code>构造函数可以接受两个参数，第一个是字符串，表示事件类型，对于滚轮事件来说，这个值目前只能是<code>wheel</code>。</li><li>第二个参数是事件的配置对象。该对象的属性除了<code>Event</code>、<code>UIEvent</code>的配置属性以外，还可以接受以下几个属性，所有属性都是可选的。</li></ol><ul><li><code>deltaX</code>：数值，表示滚轮的水平滚动量，默认值是 <code>0.0</code>。</li><li><code>deltaY</code>：数值，表示滚轮的垂直滚动量，默认值是 <code>0.0</code>。</li><li><code>deltaZ</code>：数值，表示滚轮的 Z 轴滚动量，默认值是 <code>0.0</code>。</li><li><code>deltaMode</code>：数值，表示相关的滚动事件的单位，适用于上面三个属性。<code>0</code> 表示滚动单位为像素，<code>1</code> 表示单位为行，<code>2</code> 表示单位为页，默认为 <code>0</code>。</li></ul><h3 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h3><ol><li><code>WheelEvent</code>事件实例除了具有<code>Event</code>和<code>MouseEvent</code>的实例属性和实例方法，还有一些自己的实例属性，但是没有自己的实例方法。</li><li><code>WheelEvent</code>的实例属性如下，它们都是只读属性。</li></ol><ul><li><code>WheelEvent.deltaX</code>：数值，表示滚轮的水平滚动量。</li><li><code>WheelEvent.deltaY</code>：数值，表示滚轮的垂直滚动量。</li><li><code>WheelEvent.deltaZ</code>：数值，表示滚轮的 <code>Z</code>轴滚动量。</li><li><code>WheelEvent.deltaMode</code>：数值，表示上面三个属性的单位，<code>0</code>是像素，<code>1</code>是行，<code>2</code>是页。</li></ul>`,55),l=[s];function d(n,c,r,h,u,v){return t(),o("div",null,l)}const m=e(i,[["render",d]]);export{E as __pageData,m as default};
