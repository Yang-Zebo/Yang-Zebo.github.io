import{_ as e,c as i,o as a,a4 as d}from"./chunks/framework.DMnPLqTg.js";const m=JSON.parse('{"title":"DOM","description":"","frontmatter":{},"headers":[],"relativePath":"guide/JavaScript/WebApi/Dom/00.md","filePath":"guide/JavaScript/WebApi/Dom/00.md","lastUpdated":1721114433000}'),o={name:"guide/JavaScript/WebApi/Dom/00.md"},s=d(`<h1 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;DOM&quot;">​</a></h1><h2 id="_1-概述" tabindex="-1">1. 概述 <a class="header-anchor" href="#_1-概述" aria-label="Permalink to &quot;1. 概述&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ol><li><code>DOM</code> 是 <code>JavaScript</code> 操作网页的接口，全称为“文档对象模型”<code>Document Object Model</code>。</li><li>浏览器会根据 <code>DOM</code> 模型，将结构化文档比如 <code>HTML</code> 和 <code>XML</code> 解析成一系列的节点，再由这些节点组成一个树状结构<code>DOM Tree</code> ，所有的节点都有规范的对外接口。</li></ol><h3 id="dom-作用" tabindex="-1">DOM 作用 <a class="header-anchor" href="#dom-作用" aria-label="Permalink to &quot;DOM 作用&quot;">​</a></h3><ol><li>它的作用是将网页转为一个 <code>JavaScript</code> 对象，利用全局变量 <code>document</code> 可以访问 <code>Document</code> 对象，可以用脚本进行各种操作比如增删内容。</li><li><code>DOM</code> 操作是 <code>JavaScript</code> 最常见的任务，离开了 <code>DOM</code>，<code>JavaScript</code> 就无法控制网页。另一方面，<code>JavaScript</code> 也是最常用于 <code>DOM</code> 操作的语言。</li></ol><h2 id="_2-节点" tabindex="-1">2. 节点 <a class="header-anchor" href="#_2-节点" aria-label="Permalink to &quot;2. 节点&quot;">​</a></h2><h3 id="概述-1" tabindex="-1">概述 <a class="header-anchor" href="#概述-1" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ol><li><code>DOM</code> 的最小组成单位叫做节点<code>node</code>。文档的树形结构 <code>DOM</code> 树，就是由各种不同类型的节点组成。</li><li>浏览器提供一个原生的节点对象<code>Node</code>，下面这七种节点都继承了<code>Node</code>，因此具有一些共同的属性和方法。</li></ol><h3 id="七种节点的类型" tabindex="-1">七种节点的类型： <a class="header-anchor" href="#七种节点的类型" aria-label="Permalink to &quot;七种节点的类型：&quot;">​</a></h3><ol><li><code>Document</code>：文档节点，整个文档树的顶层节点。</li><li><code>DocumentType</code>：文档类型声明节点，<code>doctype</code>标签比如<code>&lt;!DOCTYPE html&gt;</code>。</li><li><code>Element</code>： 元素节点，网页的各种<code>HTML</code>标签节点，比如<code>&lt;body&gt;</code>、<code>&lt;a&gt;</code>等。</li><li><code>Attr</code>：属性节点，网页元素的属性比如 <code>class=&quot;right&quot;</code>。</li><li><code>Text</code>：文本节点，标签之间或标签包含的文本。</li><li><code>Comment</code>：注释节点。</li><li><code>DocumentFragment</code>：文档的片段节点。</li></ol><h2 id="_3-节点树" tabindex="-1">3. 节点树 <a class="header-anchor" href="#_3-节点树" aria-label="Permalink to &quot;3. 节点树&quot;">​</a></h2><h3 id="概述-2" tabindex="-1">概述 <a class="header-anchor" href="#概述-2" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ol><li>一个文档的所有节点，按照所在的层级，可以抽象成一种树状结构。这种树状结构就是 <code>DOM</code> 树。</li><li>节点树有一个顶层节点，下一层都是顶层节点的子节点，然后子节点又有自己的子节点，就这样层层衍生出一个金字塔结构，又像一棵树。</li><li>浏览器原生提供<code>document</code>节点，代表整个文档，文档的第一层有两个节点： <ul><li>第一个是文档类型节点<code>&lt;!doctype html&gt;</code></li><li>第二个是 <code>HTML</code> 网页的顶层容器标签<code>&lt;html&gt;</code>，他是树结构的根节点<code>root node</code>，其他 <code>HTML</code> 标签节点都是它的下级节点。</li></ul></li></ol><h3 id="节点间的关系" tabindex="-1">节点间的关系 <a class="header-anchor" href="#节点间的关系" aria-label="Permalink to &quot;节点间的关系&quot;">​</a></h3><ol><li>除了根节点，其他节点都有三种层级关系。</li><li>父节点关系<code>parentNode</code>：直接的那个上级节点。</li><li>子节点关系<code>childNodes</code>：直接的下级节点。</li><li>同级节点关系<code>sibling</code>：拥有同一个父节点的节点。</li></ol><h2 id="_4-dom节点三大属性" tabindex="-1">4. DOM节点三大属性 <a class="header-anchor" href="#_4-dom节点三大属性" aria-label="Permalink to &quot;4. DOM节点三大属性&quot;">​</a></h2><h3 id="概述-3" tabindex="-1">概述 <a class="header-anchor" href="#概述-3" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ol><li><code>nodeName</code>，元素节点、属性节点、文本节点分别返回元素的名称、属性的名称和文本的字符串。<div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;d1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hello world&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Node.prototype.nodeName</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;d1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.nodeName </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;DIV&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><code>nodeType</code> 返回数值，代表节点的类型。 不同节点的<code>nodeType</code>属性值不同。<div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Node.prototype.nodeType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.nodeType </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><code>nodeValue</code>，元素节点、属性节点、文本节点的返回值分别为<code>null</code> 、属性值和文本节点内容。只有文本节点、注释节点和属性节点有文本值，因此这三类节点的<code>nodeValue</code> 可以返回结果和设置值，其他类型的节点一律返回<code>null</code>且不能设置值。<div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;d1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hello world&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Node.prototype.nodeValue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d1.nodeValue </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d1.firstChild.nodeValue </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;hello world&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><h3 id="不同节点的nodetype属性值和对应的常量" tabindex="-1">不同节点的nodeType属性值和对应的常量 <a class="header-anchor" href="#不同节点的nodetype属性值和对应的常量" aria-label="Permalink to &quot;不同节点的nodeType属性值和对应的常量&quot;">​</a></h3><ol><li>元素节点<code>element</code>：<code>1</code>，对应常量<code>Node.ELEMENT_NODE</code>。</li><li>属性节点<code>attr</code>：<code>2</code>，对应常量<code>Node.ATTRIBUTE_NODE</code>。</li><li>文本节点<code>text</code>：<code>3</code>，对应常量<code>Node.TEXT_NODE</code>。</li><li>注释节点<code>Comment</code>：<code>8</code>，对应常量 <code>Node.COMMENT_NODE</code>。</li><li>文档节点<code>document</code>：<code>9</code>，对应常量<code>Node.DOCUMENT_NODE</code>。</li><li>文档类型节点<code>DocumentType</code>：<code>10</code>，对应常量 <code>Node.DOCUMENT_TYPE_NODE</code>。</li><li>文档片段节点<code>DocumentFragment</code>：<code>11</code>，对应常量 <code>Node.DOCUMENT_FRAGMENT_NODE</code>。</li></ol><h3 id="不同节点的nodename属性值如下。" tabindex="-1">不同节点的<code>nodeName</code>属性值如下。 <a class="header-anchor" href="#不同节点的nodename属性值如下。" aria-label="Permalink to &quot;不同节点的\`nodeName\`属性值如下。&quot;">​</a></h3><ol><li>文档节点<code>document</code>：<code>#document</code></li><li>元素节点<code>element</code>：大写的标签名</li><li>属性节点<code>attr</code>：属性的名称</li><li>文本节点<code>text</code>：<code>#text</code></li><li>文档片断节点<code>DocumentFragment</code>：<code>#document-fragment</code></li><li>文档类型节点<code>DocumentType</code>：文档的类型</li><li>注释节点<code>Comment</code>：<code>#comment</code></li></ol>`,23),l=[s];function t(n,c,h,r,p,k){return a(),i("div",null,l)}const b=e(o,[["render",t]]);export{m as __pageData,b as default};
