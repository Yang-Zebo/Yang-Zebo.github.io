import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.DMnPLqTg.js";const n="/assets/bom.BSjkRvvN.png",b=JSON.parse('{"title":"BOM","description":"","frontmatter":{},"headers":[],"relativePath":"guide/JavaScript/WebApi/Bom/00.md","filePath":"guide/JavaScript/WebApi/Bom/00.md","lastUpdated":1721114433000}'),l={name:"guide/JavaScript/WebApi/Bom/00.md"},t=e('<h1 id="bom" tabindex="-1">BOM <a class="header-anchor" href="#bom" aria-label="Permalink to &quot;BOM&quot;">​</a></h1><h2 id="_1-概述" tabindex="-1">1. 概述 <a class="header-anchor" href="#_1-概述" aria-label="Permalink to &quot;1. 概述&quot;">​</a></h2><ol><li><code>BOM</code> 即浏览器对象模型，主要是指一些浏览器内置对象如：<code>window</code>、<code>location</code>、<code>navigator</code>、<code>screen</code>、<code>history</code>、<code>document</code>、<code>event</code> 等对象，用于完成一些操作浏览器的特定<code>API</code>。</li><li><code>BOM</code>由多个对象组成，其中代表浏览器窗口的<code>Window</code>对象是<code>BOM</code> 的顶层对象，其他对象都是该对象的子对象。定义在全局作用域中的变量、函数都会变成<code>window</code>对象的属性和方法。</li><li><code>BOM</code>缺乏标准，<code>Javascript</code>语法的标准化组织的<code>ECMA</code>，<code>DOM</code>的标准化组织的<code>W3C</code>，<code>BOM</code>最初是<code>Netscape</code>浏览器标准的一部分。</li></ol><p><img src="'+n+`" alt="alt text" title="BOM 结构"></p><h2 id="_2-window-常用方法" tabindex="-1">2. window 常用方法 <a class="header-anchor" href="#_2-window-常用方法" aria-label="Permalink to &quot;2. window 常用方法&quot;">​</a></h2><h3 id="对话框与窗口" tabindex="-1">对话框与窗口 <a class="header-anchor" href="#对话框与窗口" aria-label="Permalink to &quot;对话框与窗口&quot;">​</a></h3><ol><li><code>alert(text)</code>，弹出对话框，参数为一个字符串，表示弹出框要显示的文字。</li><li><code>prompt(text, defaultt)</code>，弹出输入框，第一个参数为字符串，表示弹出框要显示的文字。第二个参数为输入框默认的值，可不填。函数返回输入框输入的值。</li><li><code>confirm(&#39;text&#39;)</code>，弹出确认框，第一个参数为一个字符串，表示确认框要显示的文字。点击确认函数返回<code>true</code> ，点击取消返回<code>false</code>。</li><li><code>open(url, name, parameters)</code>，打开一个新的浏览器或者查找一个已命名的窗口。 <ul><li><code>url</code>表示子窗口的路径是字符串类型，<code>name</code>是字符串类型， 表示子窗口的句柄，也声明了新窗口的名称，方便后期对子窗口的引用，<code>parameters</code>窗口的参数也是字符串类型，参数用逗号隔开。</li><li><code>parameters</code>参数。<code>width</code>：窗口的宽度，<code>height</code>:窗口的高度，<code>left</code>:窗口的<code>x</code>坐标轴，<code>top</code>:窗口的<code>y</code>坐标轴，<code>toolbar</code>: 是否显示浏览器的工具栏，<code>menubar</code>:是否显示菜单栏，<code>scrollbars</code>:是否显示滚动条，<code>location</code>:是否显示地址字段，<code>status</code>:是否添加状态栏。</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 打开子窗口，显示newwindow.html                    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;newwindow.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;newwindow&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;width=400,height=200,left=0,top=0,toolbar=no,menubar=no,scrollbars=no,location=no,status=no&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><code>close()</code>，用来关闭当前的浏览器窗口。使用哪个<code>window</code>对象调用的<code>close</code>方法就会关闭哪个窗口。<div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 直接调用关闭的就是当前窗口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> win</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">win.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 关闭的就是 open 打开的窗口</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><h3 id="页面加载事件" tabindex="-1">页面加载事件 <a class="header-anchor" href="#页面加载事件" aria-label="Permalink to &quot;页面加载事件&quot;">​</a></h3><ol><li><code>unload</code>，<code>load</code>与<code>beforeunload</code>事件具体<a href="/guide/JavaScript/WebApi/03/03_07.html#_1-资源事件">点击查看详情</a>。</li></ol><h3 id="定时器与清楚定时器" tabindex="-1">定时器与清楚定时器 <a class="header-anchor" href="#定时器与清楚定时器" aria-label="Permalink to &quot;定时器与清楚定时器&quot;">​</a></h3><ol><li><code>setTimeout(callback, time)</code>, 超时调用，表示<code>time</code>时间超过就调用<code>callback</code> 函数。函数有两个参数，第一个是回调函数，第二个是时间单位是毫秒。函数返回一个<code>定时器id</code>表示这个定时器本身。</li><li><code>clearTimeout(timerId)</code>，取消延迟执行的代码块。<div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一秒后打印 hello</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timer) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 取消定时器</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><code>setInterval(callback, time)</code>，间歇调用，表示每隔<code>time</code>时间执行一次<code>callback</code>函数。参数与<code>setTimeout</code> 一样，一样也会返回<code>定时器id</code>。</li><li><code>clearInterval(timerId)</code>，取消间歇调用的定时器。<div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> timer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每隔一秒打印一次 hello</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timer) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 取消定时器</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ol><h3 id="其他属性于方法" tabindex="-1">其他属性于方法 <a class="header-anchor" href="#其他属性于方法" aria-label="Permalink to &quot;其他属性于方法&quot;">​</a></h3><ol><li>所有 <code>window</code> 对象的相关属性与方法可以<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window" target="_blank" rel="noreferrer">点击查看详情</a>。</li></ol>`,13),d=[t];function o(h,p,c,r,k,E){return a(),i("div",null,d)}const u=s(l,[["render",o]]);export{b as __pageData,u as default};
