import{_ as e,c as o,o as d,a2 as a}from"./chunks/framework.BLHWSx9w.js";const k=JSON.parse('{"title":"键盘事件","description":"","frontmatter":{},"headers":[],"relativePath":"guide/JavaScript/WebApi/03/03_04.md","filePath":"guide/JavaScript/WebApi/03/03_04.md","lastUpdated":1656495012000}'),c={name:"guide/JavaScript/WebApi/03/03_04.md"},t=a('<h1 id="键盘事件" tabindex="-1">键盘事件 <a class="header-anchor" href="#键盘事件" aria-label="Permalink to &quot;键盘事件&quot;">​</a></h1><h2 id="_1-键盘事件的种类" tabindex="-1">1. 键盘事件的种类 <a class="header-anchor" href="#_1-键盘事件的种类" aria-label="Permalink to &quot;1. 键盘事件的种类&quot;">​</a></h2><ol><li>键盘事件由用户击打键盘触发，主要有<code>keydown</code>、<code>keypress</code>、<code>keyup</code>三个事件，它们都继承了<code>KeyboardEvent</code>接口。</li></ol><ul><li><code>keydown</code>：按下键盘时触发。</li><li><code>keypress</code>：按下有值的键时触发，即按下 <code>Ctrl</code>、<code>Alt</code>、<code>Shift</code>、<code>Meta</code> 这样无值的键，这个事件不会触发。对于有值的键，按下时先触发<code>keydown</code>事件，再触发这个事件。</li><li><code>keyup</code>：松开键盘时触发该事件。</li></ul><ol start="2"><li>如果用户一直按键不松开，就会连续触发键盘事件，触发的顺序为<code>keydown</code>，<code>keypress</code>...两个事件循环触发，直至最后松开触发<code>keyup</code>。</li></ol><h2 id="_2-keyboardevent-接口" tabindex="-1">2. KeyboardEvent 接口 <a class="header-anchor" href="#_2-keyboardevent-接口" aria-label="Permalink to &quot;2. KeyboardEvent 接口&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ol><li><code>KeyboardEvent</code>接口用来描述用户与键盘的互动。这个接口继承了<code>Event</code>接口，并且定义了自己的实例属性和实例方法。</li></ol><h3 id="构造函数-keyboardevent" tabindex="-1">构造函数 KeyboardEvent() <a class="header-anchor" href="#构造函数-keyboardevent" aria-label="Permalink to &quot;构造函数 KeyboardEvent()&quot;">​</a></h3><ol><li>浏览器原生提供<code>KeyboardEvent</code>构造函数，用来新建键盘事件的实例。</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KeyboardEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, options)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li><code>KeyboardEvent()</code>构造函数接受两个参数。</li></ol><ul><li>第一个参数是字符串，表示事件类型；</li><li>第二个参数是一个事件配置对象，除了<code>Event</code>接口的实例配置属性，该对象可以配置很多属性，所有属性都是可选的。</li></ul><ol start="3"><li><code>KeyboardEvent()</code>构造函数第二个参数的配置属性。</li></ol><ul><li><code>key</code>：字符串，当前按下的键，默认为空字符串。</li><li><code>code</code>：字符串，表示当前按下的键的字符串形式，默认为空字符串。</li><li><code>location</code>：整数，当前按下的键的位置，默认为<code>0</code>。</li><li><code>ctrlKey</code>：布尔值，是否按下 <code>Ctrl</code> 键，默认为<code>false</code>。</li><li><code>shiftKey</code>：布尔值，是否按下 <code>Shift</code> 键，默认为<code>false</code>。</li><li><code>altKey</code>：布尔值，是否按下 <code>Alt</code> 键，默认为<code>false</code>。</li><li><code>metaKey</code>：布尔值，是否按下 <code>Meta</code> 键，默认为<code>false</code>。</li><li><code>repeat</code>：布尔值，是否重复按键，默认为<code>false</code>。</li></ul><h2 id="_3-keyboardevent-的实例属性" tabindex="-1">3. KeyboardEvent 的实例属性 <a class="header-anchor" href="#_3-keyboardevent-的实例属性" aria-label="Permalink to &quot;3. KeyboardEvent 的实例属性&quot;">​</a></h2><h3 id="keyboardevent-altkey-keyboardevent-ctrlkey-keyboardevent-metakey-keyboardevent-shiftkey" tabindex="-1">KeyboardEvent.altKey，KeyboardEvent.ctrlKey，KeyboardEvent.metaKey，KeyboardEvent.shiftKey <a class="header-anchor" href="#keyboardevent-altkey-keyboardevent-ctrlkey-keyboardevent-metakey-keyboardevent-shiftkey" aria-label="Permalink to &quot;KeyboardEvent.altKey，KeyboardEvent.ctrlKey，KeyboardEvent.metaKey，KeyboardEvent.shiftKey&quot;">​</a></h3><ol><li>四个属性都是只读属性，返回一个布尔值，表示是否按下对应的键。</li></ol><ul><li><code>KeyboardEvent.altKey</code>：是否按下 <code>Alt</code> 键</li><li><code>KeyboardEvent.ctrlKey</code>：是否按下 <code>Ctrl</code> 键</li><li><code>KeyboardEvent.metaKey</code>：是否按下 <code>meta</code> 键（Mac 键盘是 Command 键，Windows 键盘是 Windows 键）</li><li><code>KeyboardEvent.shiftKey</code>：是否按下 <code>Shift</code> 键</li></ul><h3 id="keyboardevent-code" tabindex="-1">KeyboardEvent.code <a class="header-anchor" href="#keyboardevent-code" aria-label="Permalink to &quot;KeyboardEvent.code&quot;">​</a></h3><ol><li><code>KeyboardEvent.code</code>属性返回一个字符串，表示当前按下的键的字符串形式。该属性只读。</li><li>各个键对应的<code>code</code><a href="https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_code_values" target="_blank" rel="noreferrer">详情请看文档</a>。</li><li>常用键的<code>code</code>：</li></ol><ul><li>数字键<code>0 - 9</code>：返回<code>digit0</code> - <code>digit9</code></li><li>字母键<code>A - z</code>：返回<code>KeyA</code> - <code>KeyZ</code></li><li>功能键<code>F1 - F12</code>：返回 <code>F1</code>- <code>F12</code></li><li>方向键：返回<code>ArrowDown</code>、<code>ArrowUp</code>、<code>ArrowLeft</code>、<code>ArrowRight</code></li><li><code>Alt</code> 键：返回<code>AltLeft</code>或<code>AltRight</code></li><li><code>Shift</code> 键：返回<code>ShiftLeft</code>或<code>ShiftRight</code></li><li><code>Ctrl</code> 键：返回<code>ControlLeft</code>或<code>ControlRight</code></li></ul><h3 id="keyboardevent-key" tabindex="-1">KeyboardEvent.key <a class="header-anchor" href="#keyboardevent-key" aria-label="Permalink to &quot;KeyboardEvent.key&quot;">​</a></h3><ol><li><code>KeyboardEvent.key</code>属性返回一个字符串，表示按下的键名。该属性只读。</li><li>如果按下的键代表可打印字符，则返回这个字符，比如数字、字母。</li><li>如果按下的键代表不可打印的特殊字符，则返回预定义的键值，比如 <code>Backspace</code>，<code>Tab</code>，<code>Enter</code>，<code>Shift</code>，<code>Control</code>，<code>Alt</code>...</li><li>如果同时按下一个控制键和一个符号键，则返回符号键的键名。</li><li>如果无法识别键名，返回字符串<code>Unidentified</code>。</li></ol><h3 id="keyboardevent-location" tabindex="-1">KeyboardEvent.location <a class="header-anchor" href="#keyboardevent-location" aria-label="Permalink to &quot;KeyboardEvent.location&quot;">​</a></h3><ol><li><code>KeyboardEvent.location</code>属性返回一个整数，表示按下的键处在键盘的哪一个区域。它可能取以下值。</li></ol><ul><li><code>0</code>：处在键盘的主区域，或者无法判断处于哪一个区域。</li><li><code>1</code>：处在键盘的左侧，只适用那些有两个位置的键（比如 <code>Ctrl</code> 和 <code>Shift</code> 键）。</li><li><code>2</code>：处在键盘的右侧，只适用那些有两个位置的键（比如 <code>Ctrl</code> 和 <code>Shift</code> 键）。</li><li><code>3</code>：处在数字小键盘。</li></ul><h3 id="keyboardevent-repeat" tabindex="-1">KeyboardEvent.repeat <a class="header-anchor" href="#keyboardevent-repeat" aria-label="Permalink to &quot;KeyboardEvent.repeat&quot;">​</a></h3><ol><li><code>KeyboardEvent.repeat</code>返回一个布尔值，代表该键是否被按着不放，以便判断是否重复这个键，即浏览器会持续触发<code>keydown</code>和<code>keypress</code>事件，直到用户松开手为止。</li></ol><h2 id="_4-keyboardevent-的实例方法" tabindex="-1">4. KeyboardEvent 的实例方法 <a class="header-anchor" href="#_4-keyboardevent-的实例方法" aria-label="Permalink to &quot;4. KeyboardEvent 的实例方法&quot;">​</a></h2><h3 id="keyboardevent-getmodifierstate" tabindex="-1">KeyboardEvent.getModifierState() <a class="header-anchor" href="#keyboardevent-getmodifierstate" aria-label="Permalink to &quot;KeyboardEvent.getModifierState()&quot;">​</a></h3><ol><li><code>KeyboardEvent.getModifierState()</code>方法返回一个布尔值，表示是否按下或激活指定的功能键。</li><li>参数是一个字符串：</li></ol><ul><li><code>Alt</code>：<code>Alt</code> 键</li><li><code>CapsLock</code>：大写锁定键</li><li><code>Control</code>：<code>Ctrl</code> 键</li><li><code>Meta</code>：<code>Meta</code> 键</li><li><code>NumLock</code>：数字键盘开关键</li><li><code>Shift</code>：<code>Shift</code> 键</li></ul>',33),l=[t];function i(r,n,s,y,h,b){return d(),o("div",null,l)}const u=e(c,[["render",i]]);export{k as __pageData,u as default};
